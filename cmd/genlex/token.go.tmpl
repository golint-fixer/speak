// generated by speak; DO NOT EDIT.

// Package token defines constants representing the lexical tokens of the source
// language.
package token

import "fmt"

// A Token represents a lexical token of the source language.
type Token struct {
	// Start position in the source input.
	Pos int
	// Token type.
	ID ID
	// Token literal.
	Lit []byte
}

// String returns the string represenatation of the token.
func (tok *Token) String() string {
	return fmt.Sprintf("Pos: %d, ID: %s, Lit: %q", tok.Pos, tok.ID, tok.Lit)
}

// ID is the set of lexical tokens of the source language.
type ID uint

// String returns the string represenatation of the token ID.
func (id ID) String() string {
	if int(id) < len(IDs) {
		return IDs[id]
	}
	return fmt.Sprintf("<unknown token ID %d>", uint(id))
}

// IDs specifies the string representation of each token ID.
var IDs = [...]string{
{{- range . }}
	"{{ . }}",
{{- end }}
}
